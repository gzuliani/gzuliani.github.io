add_compile_options(option ...)
add_custom_command(OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [BYPRODUCTS [files...]] [IMPLICIT_DEPENDS lang1 depend1 [lang2 depend2] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [APPEND] [USES_TERMINAL])
add_custom_command(TARGET target PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [USES_TERMINAL])
add_custom_target(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [USES_TERMINAL] [SOURCES src1 [src2...]])
add_definitions(-DFOO -DBAR ...)
add_dependencies(target [target-dependency]...)
add_executable(name [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 [source2 ...])
add_executable(name IMPORTED [GLOBAL])
add_executable(name ALIAS target)
add_library(name [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1 [source2 ...])
add_library(name SHARED|STATIC|MODULE|UNKNOWN IMPORTED [GLOBAL])
add_library(name OBJECT src...)
add_library(name ALIAS target)
add_library(name INTERFACE [IMPORTED [GLOBAL]])
add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
add_test(NAME name COMMAND command [arg...] [CONFIGURATIONS config...] [WORKING_DIRECTORY dir])
add_test(name command [arg...])
aux_source_directory(dir variable)
break()
build_command(variable [CONFIGURATION config] [TARGET target] [PROJECT_NAME projname])
cmake_host_system_information(RESULT variable QUERY key ...)
cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]] [FATAL_ERROR])
cmake_policy(VERSION major.minor[.patch[.tweak]])
cmake_policy(SET CMPNNNN NEW)
cmake_policy(SET CMPNNNN OLD)
cmake_policy(GET CMPNNNN variable)
cmake_policy(PUSH)
cmake_policy(POP)
configure_file(input output [COPYONLY] [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])
continue()
create_test_sourcelist(sourceListName driverName test1 test2 test3 EXTRA_INCLUDE include.h FUNCTION function)
define_property(GLOBAL | DIRECTORY | TARGET | SOURCE | TEST | VARIABLE | CACHED_VARIABLE PROPERTY name [INHERITED] BRIEF_DOCS brief-doc [docs...] FULL_DOCS full-doc [docs...])
elseif(expression)
else(expression)
enable_language(lang [OPTIONAL])
enable_testing()
endforeach(expression)
endfunction(expression)
endif(expression)
endmacro(expression)
endwhile(expression)
execute_process(COMMAND cmd1 [args1...]] [COMMAND cmd2 [args2...] [...]] [WORKING_DIRECTORY directory] [TIMEOUT seconds] [RESULT_VARIABLE variable] [OUTPUT_VARIABLE variable] [ERROR_VARIABLE variable] [INPUT_FILE file] [OUTPUT_FILE file] [ERROR_FILE file] [OUTPUT_QUIET] [ERROR_QUIET] [OUTPUT_STRIP_TRAILING_WHITESPACE] [ERROR_STRIP_TRAILING_WHITESPACE])
export(EXPORT export-name [NAMESPACE namespace] [FILE filename])
export(TARGETS [target1 [target2 [...]]] [NAMESPACE namespace] [APPEND] FILE filename [EXPORT_LINK_INTERFACE_LIBRARIES])
export(PACKAGE name)
file(WRITE filename content...)file(APPEND filename content...)
file(READ filename variable [OFFSET offset] [LIMIT max-in] [HEX])
file(STRINGS filename variable [options...])
file(MD5|SHA1|SHA224|SHA256|SHA384|SHA512 filename variable)
file(GLOB variable [RELATIVE path] [globbing-expressions...])file(GLOB_RECURSE variable [RELATIVE path] [FOLLOW_SYMLINKS] [globbing-expressions...])
file(RENAME oldname newname)
file(REMOVE [files...])file(REMOVE_RECURSE [files...])
file(MAKE_DIRECTORY [directories...])
file(RELATIVE_PATH variable directory file)
file(TO_CMAKE_PATH path variable)file(TO_NATIVE_PATH path variable)
file(DOWNLOAD url file [options...])file(UPLOAD file url [options...])
file(TIMESTAMP filename variable [format] [UTC])
file(GENERATE OUTPUT output-file INPUT input-file|CONTENT content [CONDITION expression])
file(COPY|INSTALL files... DESTINATION dir [FILE_PERMISSIONS permissions...] [DIRECTORY_PERMISSIONS permissions...] [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS] [FILES_MATCHING] [[PATTERN pattern | REGEX regex] [EXCLUDE] [PERMISSIONS permissions...]] [...])
file(LOCK path [DIRECTORY] [RELEASE] [GUARD FUNCTION|FILE|PROCESS] [RESULT_VARIABLE variable] [TIMEOUT seconds])
find_file(VAR name1 [path1 path2 ...])
find_file(VAR name | NAMES name1 [name2 ...] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC cache documentation string] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])
find_file(VAR NAMES name PATHS paths... NO_DEFAULT_PATH)find_file (VAR NAMES name)
find_library(VAR name1 [path1 path2 ...])
find_library(VAR name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC cache documentation string] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])
find_library(VAR NAMES name PATHS paths... NO_DEFAULT_PATH)find_library (VAR NAMES name)
find_package(package [version] [EXACT] [QUIET] [MODULE] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [NO_POLICY_SCOPE])
find_package(package [version] [EXACT] [QUIET] [REQUIRED] [[COMPONENTS] [components...]] [CONFIG|NO_MODULE] [NO_POLICY_SCOPE] [NAMES name1 [name2 ...]] [CONFIGS config1 [config2 ...]] [HINTS path1 [path2 ... ]] [PATHS path1 [path2 ... ]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_PACKAGE_REGISTRY] [NO_CMAKE_BUILDS_PATH] [NO_CMAKE_SYSTEM_PATH] [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])
find_package(package [major[.minor]] [EXACT] [REQUIRED|QUIET])
find_package(package PATHS paths... NO_DEFAULT_PATH)
find_package(package)
find_path(VAR name1 [path1 path2 ...])
find_path(VAR name | NAMES name1 [name2 ...] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC cache documentation string] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])
find_path(VAR NAMES name PATHS paths... NO_DEFAULT_PATH)find_path (VAR NAMES name)
find_program(VAR name1 [path1 path2 ...])
find_program(VAR name | NAMES name1 [name2 ...] [HINTS path1 [path2 ... ENV var]] [PATHS path1 [path2 ... ENV var]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC cache documentation string] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])
find_program(VAR NAMES name PATHS paths... NO_DEFAULT_PATH)find_program (VAR NAMES name)
fltk_wrap_ui(resultingLibraryName source1 source2 ... sourceN)
foreach(loop_var arg1 arg2 ...) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ...endforeach(loop_var)
foreach(loop_var RANGE total)
foreach(loop_var RANGE start stop [step])
foreach(loop_var IN [LISTS [list1 [...]]] [ITEMS [item1 [...]]])
function(name [arg1 [arg2 [arg3 ...]]])
get_cmake_property(VAR property)
get_directory_property(variable [DIRECTORY dir] prop-name)
get_directory_property(variable [DIRECTORY dir] DEFINITION var-name)
get_filename_component(VAR FileName COMP [CACHE])
get_filename_component(VAR FileName PROGRAM [PROGRAM_ARGS ARG_VAR] [CACHE])
get_property(variable GLOBAL | DIRECTORY [dir] | TARGET target | SOURCE source | INSTALL file | TEST test | CACHE entry | VARIABLE PROPERTY name [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])
get_source_file_property(VAR file property)
get_target_property(VAR target property)
get_test_property(test property VAR)
if(constant)
if(variable|string)
if(NOT expression)
if(expr1 AND expr2)
if(expr1 OR expr2)
if(COMMAND command-name)
if(POLICY policy-id)
if(TARGET target-name)
if(EXISTS path-to-file-or-directory)
if(file1 IS_NEWER_THAN file2)
if(IS_DIRECTORY path-to-directory)
if(IS_SYMLINK file-name)
if(IS_ABSOLUTE path)
if(variable|string MATCHES regex)
if(variable|string LESS variable|string)
if(variable|string GREATER variable|string)
if(variable|string EQUAL variable|string)
if(variable|string STRLESS variable|string)
if(variable|string STRGREATER variable|string)
if(variable|string STREQUAL variable|string)
if(variable|string VERSION_LESS variable|string)
if(variable|string VERSION_EQUAL variable|string)
if(variable|string VERSION_GREATER variable|string)
if(DEFINED variable)
if((expression) AND (expression OR ()expression))
include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])
include_external_msproject(projectname location [TYPE projectTypeGUID] [GUID projectGUID] [PLATFORM platformName] dep1 dep2 ...)
include_regular_expression(regex_match [regex_complain])
include(file|module [OPTIONAL] [RESULT_VARIABLE VAR] [NO_POLICY_SCOPE])
install(TARGETS targets... [EXPORT export-name] [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE| PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE] [DESTINATION dir] [INCLUDES DESTINATION [dir ...]] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT component] [OPTIONAL] [NAMELINK_ONLY|NAMELINK_SKIP] ] [...])
install(FILES|PROGRAMS files... DESTINATION dir [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT component] [RENAME name] [OPTIONAL])
install(DIRECTORY dirs... DESTINATION dir [FILE_PERMISSIONS permissions...] [DIRECTORY_PERMISSIONS permissions...] [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT component] [FILES_MATCHING] [[PATTERN pattern | REGEX regex] [EXCLUDE] [PERMISSIONS permissions...]] [...])
install([[SCRIPT file] [CODE code]] [COMPONENT component] [...])
link_directories(directory1 directory2 ...)
link_libraries([item1 [item2 [...]]] [[debug|optimized|general] item] ...)
list(LENGTH list output variable)
list(GET list element index [element index ...] output variable)
list(APPEND list [element ...])
list(FIND list value output variable)
list(INSERT list element_index element [element ...])
list(REMOVE_ITEM list value [value ...])
list(REMOVE_AT list index [index ...])
list(REMOVE_DUPLICATES list)
list(REVERSE list)
list(SORT list)
load_cache(pathToCacheFile READ_WITH_PREFIX prefix entry1...)
load_cache(pathToCacheFile [EXCLUDE entry1...] [INCLUDE_INTERNALS entry1...])
load_command(COMMAND_NAME loc1 [loc2 ...])
macro(name [arg1 [arg2 [arg3 ...]]])
mark_as_advanced([CLEAR|FORCE] VAR [VAR2 ...])
math(EXPR output variable math expression)
message([mode] message to display ...)
option(option_variable help string describing option [initial value])
project(PROJECT-NAME [LANGUAGES] [language-name...])
project(PROJECT-NAME [VERSION major[.minor[.patch[.tweak]]]] [LANGUAGES language-name...])
qt_wrap_cpp(resultingLibraryName DestName SourceLists ...)
qt_wrap_ui(resultingLibraryName HeadersDestName SourcesDestName SourceLists ...)
remove_definitions(-DFOO -DBAR ...)
return()
separate_arguments(var UNIX|WINDOWS_COMMAND args)
separate_arguments(VARIABLE)
set_directory_properties(PROPERTIES prop1 value1 prop2 value2)
set_property(GLOBAL | DIRECTORY [dir] | TARGET [target1 [target2 ...]] | SOURCE [src1 [src2 ...]] | INSTALL [file1 [file2 ...]] | TEST [test1 [test2 ...]] | CACHE [entry1 [entry2 ...]] [APPEND] [APPEND_STRING] PROPERTY name [value1 [value2 ...]])
set(variable value [[CACHE type docstring [FORCE]] | PARENT_SCOPE])
set(variable value1 ... valueN)
set_source_files_properties([file1 [file2 [...]]] PROPERTIES prop1 value1 [prop2 value2 [...]])
set_target_properties(target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ...)
set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)
site_name(variable)
source_group(name [FILES src...] [REGULAR_EXPRESSION regex])
source_group(name regex)
source_group(name REGULAR_EXPRESSION regex)
string(REGEX MATCH regular_expression output variable input [input...])
string(REGEX MATCHALL regular_expression output variable input [input...])
string(REGEX REPLACE regular_expression replace_expression output variable input [input...])
string(REPLACE match_string replace_string output variable input [input...])
string(CONCAT output variable [input...])
string(MD5|SHA1|SHA224|SHA256|SHA384|SHA512 output variable input)
string(COMPARE EQUAL string1 string2 output variable)
string(COMPARE NOTEQUAL string1 string2 output variable)
string(COMPARE LESS string1 string2 output variable)
string(COMPARE GREATER string1 string2 output variable)
string(ASCII number [number ...] output variable)
string(CONFIGURE string1 output variable [@ONLY] [ESCAPE_QUOTES])
string(TOUPPER string1 output variable)
string(TOLOWER string1 output variable)
string(LENGTH string output variable)
string(SUBSTRING string begin length output variable)
string(STRIP string output variable)
string(RANDOM [LENGTH length] [ALPHABET alphabet] [RANDOM_SEED seed] output variable)
string(FIND string substring output variable [REVERSE])
string(TIMESTAMP output variable [format string] [UTC])
string(MAKE_C_IDENTIFIER input string output variable)
string(GENEX_STRIP input string output variable)
string(UUID output variable NAMESPACE namespace NAME name TYPE MD5|SHA1 [UPPER])
target_compile_definitions(target INTERFACE|PUBLIC|PRIVATE [items1...] [INTERFACE|PUBLIC|PRIVATE [items2...] ...])
target_compile_features(target PRIVATE|PUBLIC|INTERFACE feature [...])
target_compile_options(target [BEFORE] INTERFACE|PUBLIC|PRIVATE [items1...] [INTERFACE|PUBLIC|PRIVATE [items2...] ...])
target_include_directories(target [SYSTEM] [BEFORE] INTERFACE|PUBLIC|PRIVATE [items1...] [INTERFACE|PUBLIC|PRIVATE [items2...] ...])
target_link_libraries(target [item1 [item2 [...]]] [[debug|optimized|general] item] ...)
target_link_libraries(target PRIVATE|PUBLIC|INTERFACE lib ... [PRIVATE|PUBLIC|INTERFACE lib ... ] ...])
target_link_libraries(target LINK_INTERFACE_LIBRARIES [[debug|optimized|general] lib] ...)
target_link_libraries(target LINK_PRIVATE|LINK_PUBLIC [[debug|optimized|general] lib] ... [LINK_PRIVATE|LINK_PUBLIC [[debug|optimized|general] lib] ...])
target_sources(target INTERFACE|PUBLIC|PRIVATE [items1...] [INTERFACE|PUBLIC|PRIVATE [items2...] ...])
try_compile(RESULT_VAR bindir srcdir projectName [targetName] [CMAKE_FLAGS flags...] [OUTPUT_VARIABLE var])
try_compile(RESULT_VAR bindir srcfile|SOURCES srcfile... [CMAKE_FLAGS flags...] [COMPILE_DEFINITIONS defs...] [LINK_LIBRARIES libs...] [OUTPUT_VARIABLE var] [COPY_FILE fileName [COPY_FILE_ERROR var]])
try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR bindir srcfile [CMAKE_FLAGS flags...] [COMPILE_DEFINITIONS defs...] [LINK_LIBRARIES libs...] [COMPILE_OUTPUT_VARIABLE var] [RUN_OUTPUT_VARIABLE var] [OUTPUT_VARIABLE var] [ARGS args...])
unset(variable [CACHE | PARENT_SCOPE])
unset(ENV{LD_LIBRARY_PATH})
variable_watch(variable name [command to execute])
while(condition)
